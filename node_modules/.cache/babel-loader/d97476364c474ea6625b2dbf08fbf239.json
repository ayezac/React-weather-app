{"ast":null,"code":"import _classCallCheck from \"/Users/Ayesha/Desktop/Development/REACT/WeatherApp/weather-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Ayesha/Desktop/Development/REACT/WeatherApp/weather-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Ayesha/Desktop/Development/REACT/WeatherApp/weather-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Ayesha/Desktop/Development/REACT/WeatherApp/weather-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Ayesha/Desktop/Development/REACT/WeatherApp/weather-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Ayesha/Desktop/Development/REACT/WeatherApp/weather-app/src/Components/Weather.js\";\nimport React from 'react';\nimport '../App.css';\nvar ApiKey = \"040d742b4d477bb2a9bac9151e48fa50\";\n\nvar Weather =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Weather, _React$Component);\n\n  function Weather() {\n    var _this;\n\n    _classCallCheck(this, Weather);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Weather).call(this));\n    _this.state = {\n      city: \"\",\n      weather: \"\",\n      temp: \"\",\n      error: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(Weather, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props.cityQuery) {\n        fetch(\"http://api.openweathermap.org/data/2.5/weather?q=\".concat(this.props.cityQuery, \"&units=metric&APPID=\").concat(ApiKey)).then(function (response) {\n          if (response.ok) {\n            return response.json();\n          } else {\n            throw new Error('Something went wrong ...');\n          }\n        }).then(function (data) {\n          _this2.setState({\n            city: data.name,\n            weather: data.weather[0].main,\n            temp: data.main.temp + \"°C\",\n            error: undefined\n          });\n        }).catch(function (error) {\n          return _this2.setState({\n            error: \"Check that you entered a valid city\"\n          });\n        });\n      } else {\n        this.setState({\n          city: undefined,\n          weather: undefined,\n          temp: undefined,\n          error: \"Please enter a city\"\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.cityQuery !== prevProps.cityQuery) {\n        this.componentDidMount();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"weather\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \" \", this.state.error, \" \"), React.createElement(\"h1\", {\n        id: \"cityName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \" \", this.state.city, \" \"), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        id: \"description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \" \", this.state.weather, \" \")), React.createElement(\"p\", {\n        id: \"temp\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, this.state.temp, \"  \"));\n    }\n  }]);\n\n  return Weather;\n}(React.Component);\n\nexport default Weather;","map":{"version":3,"sources":["/Users/Ayesha/Desktop/Development/REACT/WeatherApp/weather-app/src/Components/Weather.js"],"names":["React","ApiKey","Weather","state","city","weather","temp","error","props","cityQuery","fetch","then","response","ok","json","Error","data","setState","name","main","undefined","catch","prevProps","componentDidMount","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,YAAP;AAGA,IAAMC,MAAM,GAAG,kCAAf;;IAEMC,O;;;;;AACJ,qBAAa;AAAA;;AAAA;;AACX;AACA,UAAKC,KAAL,GAAY;AAERC,MAAAA,IAAI,EAAE,EAFE;AAGRC,MAAAA,OAAO,EAAC,EAHA;AAIRC,MAAAA,IAAI,EAAE,EAJE;AAKRC,MAAAA,KAAK,EAAE;AALC,KAAZ;AAFW;AAUZ;;;;wCAEiB;AAAA;;AAElB,UAAI,KAAKC,KAAL,CAAWC,SAAf,EAAyB;AACnBC,QAAAA,KAAK,4DAAqD,KAAKF,KAAL,CAAWC,SAAhE,iCAAgGR,MAAhG,EAAL,CACCU,IADD,CACM,UAAAC,QAAQ,EAAI;AAChB,cAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,mBAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,WAFD,MAEO;AACL,kBAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;AACF,SAPD,EAQCJ,IARD,CAQM,UAAAK,IAAI,EAAI;AACZ,UAAA,MAAI,CAACC,QAAL,CAAc;AACdb,YAAAA,IAAI,EAAEY,IAAI,CAACE,IADG;AAEdb,YAAAA,OAAO,EAAEW,IAAI,CAACX,OAAL,CAAa,CAAb,EAAgBc,IAFX;AAGdb,YAAAA,IAAI,EAAEU,IAAI,CAACG,IAAL,CAAUb,IAAV,GAAiB,IAHT;AAIdC,YAAAA,KAAK,EAAEa;AAJO,WAAd;AAMD,SAfD,EAgBCC,KAhBD,CAgBO,UAAAd,KAAK;AAAA,iBAAI,MAAI,CAACU,QAAL,CAAc;AAAEV,YAAAA,KAAK,EAAE;AAAT,WAAd,CAAJ;AAAA,SAhBZ;AAiBA,OAlBN,MAmBO;AACD,aAAKU,QAAL,CAAc;AACZb,UAAAA,IAAI,EAAEgB,SADM;AAEZf,UAAAA,OAAO,EAAEe,SAFG;AAGZd,UAAAA,IAAI,EAAEc,SAHM;AAIZb,UAAAA,KAAK,EAAE;AAJK,SAAd;AAMD;AACJ;;;uCAEiBe,S,EAAW;AACzB,UAAG,KAAKd,KAAL,CAAWC,SAAX,KAAyBa,SAAS,CAACb,SAAtC,EACE;AACE,aAAKc,iBAAL;AACL;AAAI;;;6BAIG;AACJ,aACA;AAAK,QAAA,SAAS,EAAG,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAM,KAAKpB,KAAL,CAAWI,KAAjB,MADF,EAGE;AAAI,QAAA,EAAE,EAAC,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAoB,KAAKJ,KAAL,CAAWC,IAA/B,MAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQ;AAAG,QAAA,EAAE,EAAC,aAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAsB,KAAKD,KAAL,CAAWE,OAAjC,MAAR,CAJF,EAKE;AAAG,QAAA,EAAE,EAAC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAe,KAAKF,KAAL,CAAWG,IAA1B,OALF,CADA;AAWE;;;;EAhEYN,KAAK,CAACwB,S;;AAmE5B,eAAetB,OAAf","sourcesContent":["import React from 'react'\n\nimport '../App.css';\n\n\nconst ApiKey = \"040d742b4d477bb2a9bac9151e48fa50\"\n\nclass Weather extends React.Component {\n  constructor(){\n    super ()\n    this.state ={\n       \n        city: \"\",\n        weather:\"\",\n        temp: \"\",\n        error: \"\"\n      \n    }\n  }\n     \ncomponentDidMount() {\n    \n  if (this.props.cityQuery){\n        fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.props.cityQuery}&units=metric&APPID=${ApiKey}`)\n        .then(response => {\n          if (response.ok) {\n            return response.json();\n          } else {\n            throw new Error('Something went wrong ...');\n          }\n        })\n        .then(data => { \n          this.setState({\n          city: data.name,\n          weather: data.weather[0].main,\n          temp: data.main.temp + \"°C\" ,\n          error: undefined\n          })\n        })\n        .catch(error => this.setState({ error: \"Check that you entered a valid city\"}))\n       }\n    else {\n        this.setState({\n          city: undefined,\n          weather: undefined,\n          temp: undefined,\n          error: \"Please enter a city\"\n        }) \n      }\n  }\n\n componentDidUpdate(prevProps) {\n      if(this.props.cityQuery !== prevProps.cityQuery)\n        {\n          this.componentDidMount()\n    }   }\n      \n\n\n    render(){\n        return (\n        <div className = \"weather\">\n          <h3> {this.state.error} </h3>\n         \n          <h1 id=\"cityName\"> {this.state.city} </h1> \n          <strong><p id=\"description\"> {this.state.weather} </p></strong>\n          <p id=\"temp\">{ this.state.temp}  </p>\n          \n        \n        </div>\n        \n        )}\n}\n\nexport default Weather;"]},"metadata":{},"sourceType":"module"}